<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SEFO-UIFE</title>
  <subtitle>Do more say less</subtitle>
  <link href="/v/atom.xml" rel="self"/>
  
  <link href="https://sefon-fe.github.io/v/"/>
  <updated>2016-09-30T09:04:29.994Z</updated>
  <id>https://sefon-fe.github.io/v/</id>
  
  <author>
    <name>SEFON-UI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>angularjs项目优化方案</title>
    <link href="https://sefon-fe.github.io/v/2016/09/30/run-faster/"/>
    <id>https://sefon-fe.github.io/v/2016/09/30/run-faster/</id>
    <published>2016-09-30T09:20:31.000Z</published>
    <updated>2016-09-30T09:04:29.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h2><ul>
<li>设计器操作性能优化</li>
<li>设计器加载启动速度优化</li>
</ul>
<h2 id="操作性能优化"><a href="#操作性能优化" class="headerlink" title="操作性能优化"></a>操作性能优化</h2><h3 id="性能缺陷分析"><a href="#性能缺陷分析" class="headerlink" title="性能缺陷分析"></a>性能缺陷分析</h3><ul>
<li>设计器中未添加项目时页面中的<code>html</code>标签数量达到： 6258 个</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>).length</div><div class="line"><span class="comment">//得到 6258 多个DOM节点，还是比较多了。可想添加了项目之后这个还会增加更多，预计在1万以上</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>由于<code>html</code>节点很多，在查找操作某个DOM节点时是非常消耗性能的，其中项目中（designerDirective.js，等组件。。。）存在较多未缓存的节点操作；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//element.parent(),多次使用，可以缓存起来</span></div><div class="line"><span class="comment">//同时element.parent().parent()，也是多次使用，多次查找</span></div><div class="line">state = element.parent().attr(<span class="string">"state"</span>);</div><div class="line">   <span class="keyword">if</span> (state == <span class="string">'close'</span>) &#123;</div><div class="line">       element.parent().parent().addClass(<span class="string">"pageCtrInitialize"</span>).removeClass(<span class="string">"pageCtr"</span>);</div><div class="line">       element.parent().parent().siblings().addClass(<span class="string">"moduleCtrInitialize"</span>).removeClass(<span class="string">"moduleCtr"</span>);</div><div class="line">       element.parent().attr(<span class="string">"state"</span>, <span class="string">"open"</span>);</div><div class="line">       element.children(<span class="string">"i"</span>).addClass(<span class="string">"defaultIcon-down"</span>).removeClass(<span class="string">"defaultIcon-up"</span>);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="string">'open'</span>) &#123;</div><div class="line">       element.parent().parent().addClass(<span class="string">"pageCtr"</span>).removeClass(<span class="string">"pageCtrInitialize"</span>);</div><div class="line">       element.parent().parent().siblings().addClass(<span class="string">"moduleCtr"</span>).removeClass(<span class="string">"moduleCtrInitialize"</span>);</div><div class="line">       element.parent().attr(<span class="string">"state"</span>, <span class="string">"close"</span>);</div><div class="line">       element.children(<span class="string">"i"</span>).addClass(<span class="string">"defaultIcon-up"</span>).removeClass(<span class="string">"defaultIcon-down"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//优化</span></div><div class="line"><span class="keyword">var</span> $parent = element.parent(),</div><div class="line">	$pParent = $parent.parent();</div><div class="line"></div><div class="line"><span class="comment">//do something...</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>AngularJs</code>的脏值检测机智在<strong>某些时候</strong>会严重影响性能；具体看下面参考资料，必读篇。</p>
<ul>
<li>DOM事件，譬如用户输入文本，点击按钮等。(ng-click)</li>
<li>XHR响应事件 ($http)</li>
<li>浏览器Location变更事件 ($location)</li>
<li>Timer事件($timeout, $interval)</li>
<li><p>执行$digest()或$apply()</p>
<p>都会触发<code>$digest cycle</code></p>
</li>
</ul>
</li>
<li>页面鼠标操作触发事件是很耗性能的；</li>
</ul>
<h3 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h3><blockquote>
<p>JS&amp;Jquery操作<code>DOM</code>方向</p>
</blockquote>
<ul>
<li>尽量减少<code>html</code>标签的嵌套；</li>
<li>一定要缓存<strong>多次</strong>使用的<code>DOM</code>节点，操作节点代价很高的；</li>
<li>减少JS循环的操作；</li>
<li>使用事件代理，在多数据的列表中 <code>$(&#39;#ul&#39;).on(&#39;click&#39;, &#39;li&#39;, func)</code>;</li>
<li>对某些<code>DOM</code>样式的操作，可以考虑<code>cssText</code>或者生成临时<code>class</code>样式追加到页面中；</li>
<li><p>Jquery编码方式性能优化 【读】 </p>
<ul>
<li><a href="http://www.open-open.com/lib/view/open1401757126775.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1401757126775.html</a></li>
<li><a href="http://blog.jobbole.com/10279/" target="_blank" rel="external">http://blog.jobbole.com/10279/</a></li>
</ul>
</li>
<li><p>雅虎性能优化方案【读】</p>
<ul>
<li><a href="http://blog.csdn.net/u010648555/article/details/50721751" target="_blank" rel="external">http://blog.csdn.net/u010648555/article/details/50721751</a></li>
<li><a href="http://www.tuicool.com/articles/J3uyaa" target="_blank" rel="external">http://www.tuicool.com/articles/J3uyaa</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>AngularJs优化方向</p>
</blockquote>
<ul>
<li><p>NG的硬伤</p>
<p>  说到硬伤就要先说下它的简单的数据绑定原理,ng里每个页面上定义的<code>model</code>其实都会在当前作用域下添加一个监听器,内部容器就是<code>$$wachers</code>数组,只要页面任何一个<code>model</code>发生变化了,就会触发作用域内部<code>$digest</code>方法,它会依次查找当前作用域树里的所有<code>model</code>,是保证页面上的模型能得到数据同步,所以这个是非常消耗程序时间的,官方的说法就是当页面上出现<code>2000</code>个监听器时,页面性能就会明显下降.所以要提高ng的性能,就要从这方面入手了.</p>
</li>
</ul>
<ul>
<li>避免深度数据的<code>$watch</code>,因为会触发<code>$digest</code>，循环脏值检测；详情见【参考资料第一个】</li>
<li>指令中引用第三方服务，使用 <code>$on.$destroy</code>,来销毁当前不用的服务。</li>
<li><p>使用Angular一次绑定方案</p>
<p>  ng的1.3.0+的版本已经内置提供了一个语法来支持模型只绑定一次的情况,看下面的例子:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--双向--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--单项--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;::name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>$scope.$digest vs $scope.$apply</p>
<p>  相信很多人对<code>$apply</code>方法不陌生,它一般用在,当不在ng的环境里执行代码的时候,为了保证页面的数据同步,在代码执行完成之后调用$apply方法会触发内部<code>$digest</code>来检查作用域里所有的模型。想要保证页面上所有模型数据的同步,还是得调用<code>$rootScope</code>的,所以在写代码之前最好想想哪些数据是要同步变化的.</p>
</li>
<li><p>尽可能少调用 <code>ng-repeat</code></p>
<p>  <code>ng-repeat</code>默认会创建很多监听器,所以在数据量很大的时候,这个非常消耗页面性能,我觉的只有在当需要经常更新数据列表的时候才需要用<code>ng-repeat</code>,要不然放那么多的监听器在那里也是浪费,这时候可以用ng自带的<code>$interpolate</code>服务来解析一个代码片段,类似于一个静态模板引擎,它的内部主要依赖ng核心解析服务<code>$parse</code>,然后把这些填充数据之后的代码片段直接赋给一个一次性的模型性就可以.</p>
</li>
<li><p>尽量在指令里写原生语法</p>
<p>  虽然ng提供了很多的指令比如<code>ng-show,ng-hide</code>,其实它们作用就是根据模型的<code>true,false</code>来显示或隐藏一个代码片段,虽然能够很快速的实现业务要求,但是这些指令还是默认会添加监听器,假如这些代码片段存在于一个大的指令里面时,更好的方法是在指令<code>link</code>里编写<code>.show(), .hide()</code>这些类似的<code>jq</code>方法来控制比较好,这样可以节省监听器的数量,类似的还有自带的事件指令,这些其实都可以在外围指令里通过使用<code>addEventListener</code>来绑定事件,反正在写代码之前,最好想想怎么样来使监听器的数量最少,这样才能全面的提高页面性能.</p>
</li>
<li><p>页面内尽量少用<code>filters</code></p>
<p>  当在页面内的模型后面增加<code>filter</code>时,这个会造成当前模型在<code>$digest</code>里运行两次,造成不必要的性能浪费.第一次在<code>$$watchers</code>检测任务改变时;第二次发生在模型值修改时,所以尽量少用内联时的过滤器语法,像下面这样的非常影响页面性能<br>  推荐使用<code>$filter</code>服务来调用某个过滤器函数在后台,这样能明显的提高页面性能,代码如下</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$filter(<span class="string">'filter'</span>)(array, expression, comparator);</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>系统框架是Angular，这一块由于经验欠缺，说的不是很细，只能贴一些参考。更多的是在 JS，Jquery的操作上面，基础的优化还是很有必要的。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>AngularJS性能优化心得【建议必看】 <a href="https://github.com/atian25/blog/issues/5" target="_blank" rel="external">https://github.com/atian25/blog/issues/5</a></li>
<li>优化AngularJS：1200毫秒到35毫秒的蜕变 <a href="http://blog.jobbole.com/51180/" target="_blank" rel="external">http://blog.jobbole.com/51180/</a></li>
<li>AngularJS中的数据绑定 <a href="https://github.com/rchee/translation/blob/master/angularJS/databinding-in-angularjs.md" target="_blank" rel="external">https://github.com/rchee/translation/blob/master/angularJS/databinding-in-angularjs.md</a></li>
<li>How I’ve Improved My Angular Apps by Banning ng-controller <a href="http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html" target="_blank" rel="external">http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html</a></li>
<li>angular-lazyload <a href="https://github.com/atian25/angular-lazyload" target="_blank" rel="external">https://github.com/atian25/angular-lazyload</a></li>
</ul>
<h2 id="启动性能优化"><a href="#启动性能优化" class="headerlink" title="启动性能优化"></a>启动性能优化</h2><h3 id="启动缺陷分析"><a href="#启动缺陷分析" class="headerlink" title="启动缺陷分析"></a>启动缺陷分析</h3><ul>
<li>页面加载求情的资源总大小： ；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http://10.0.5.40/analystui/project.html#/project?lan=zh</div><div class="line">总请求数 450 个,资源总大小 17.6MB ,transferred 4.88s DOMContentLoaded 1.46s</div></pre></td></tr></table></figure>
<p>由于是局域网，所以加载完成到启动项目还不是很慢，但是一旦到了公网中，就要考虑用户的带宽问题了。同时浏览器对资源请求并发数，也是有些限制的，具体参考 <a href="http://www.zhihu.com/question/20474326" target="_blank" rel="external">http://www.zhihu.com/question/20474326</a></p>
<ul>
<li>页面请求的文件数量： 根据带宽计算时间 ；</li>
<li>图片，样式，脚本，HTML都没有使用压缩，里面包含了很多的开发注释和一些二次修改代码，导致体积很大；</li>
<li>nginx优化等等；</li>
<li>考虑使用<code>CDN</code>，或者全站<code>CDN</code>方案；</li>
</ul>
<h3 id="改进方案-1"><a href="#改进方案-1" class="headerlink" title="改进方案"></a>改进方案</h3><ul>
<li>使用<code>gulp</code>或者其他构建工具压缩 <code>CSS，JS，HTML，IMG</code>，合并等；以带到减少文件大小，请求数量等等；</li>
<li>可能的话，可以尝试使用全站<code>CDN</code>加速；</li>
<li>或者使用懒加载方案<code>lazyload</code>，加载后续操作的脚本和样式等；</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化方向&quot;&gt;&lt;a href=&quot;#优化方向&quot; class=&quot;headerlink&quot; title=&quot;优化方向&quot;&gt;&lt;/a&gt;优化方向&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;设计器操作性能优化&lt;/li&gt;
&lt;li&gt;设计器加载启动速度优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作性能优化&quot;&gt;&lt;a href=&quot;#操作性能优化&quot; class=&quot;headerlink&quot; title=&quot;操作性能优化&quot;&gt;&lt;/a&gt;操作性能优化&lt;/h2&gt;&lt;h3 id=&quot;性能缺陷分析&quot;&gt;&lt;a href=&quot;#性能缺陷分析&quot; class=&quot;headerlink&quot; title=&quot;性能缺陷分析&quot;&gt;&lt;/a&gt;性能缺陷分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计器中未添加项目时页面中的&lt;code&gt;html&lt;/code&gt;标签数量达到： 6258 个&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//得到 6258 多个DOM节点，还是比较多了。可想添加了项目之后这个还会增加更多，预计在1万以上&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="性能优化" scheme="https://sefon-fe.github.io/v/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="angular" scheme="https://sefon-fe.github.io/v/tags/angular/"/>
    
      <category term="jquery" scheme="https://sefon-fe.github.io/v/tags/jquery/"/>
    
  </entry>
  
</feed>
