<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sefon-FE</title>
  <subtitle>Do more say less</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sefon-fe.github.io/"/>
  <updated>2017-01-18T04:16:00.031Z</updated>
  <id>https://sefon-fe.github.io/</id>
  
  <author>
    <name>sefon-fe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>api-guide</title>
    <link href="https://sefon-fe.github.io/2017/01/17/api-guide/"/>
    <id>https://sefon-fe.github.io/2017/01/17/api-guide/</id>
    <published>2017-01-17T10:58:15.000Z</published>
    <updated>2017-01-18T04:16:00.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><h2 id="项目及文件命名规则"><a href="#项目及文件命名规则" class="headerlink" title="项目及文件命名规则"></a>项目及文件命名规则</h2><h3 id="项目命名"><a href="#项目命名" class="headerlink" title="项目命名"></a>项目命名</h3><p>全部采用小写方式， 以下划线分隔。<br>例：<code>my_project_name</code></p>
<h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><p>参照项目命名规则；<br>有复数结构时，要采用复数命名法。<br>例：<code>scripts</code>, <code>styles</code>, <code>images</code>, <code>data_models</code></p>
<h3 id="JS文件命名"><a href="#JS文件命名" class="headerlink" title="JS文件命名"></a>JS文件命名</h3><a id="more"></a>
<p>参照项目命名规则。<br>例：<code>account_model.js</code></p>
<h3 id="CSS，SCSS文件命名"><a href="#CSS，SCSS文件命名" class="headerlink" title="CSS，SCSS文件命名"></a>CSS，SCSS文件命名</h3><p>参照项目命名规则。<br>例：<code>retina_sprites.scss</code></p>
<h3 id="HTML文件命名"><a href="#HTML文件命名" class="headerlink" title="HTML文件命名"></a>HTML文件命名</h3><p>参照项目命名规则。<br>例：<code>error_report.html</code></p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>缩进使用soft tab（4个空格）；<br>嵌套的节点应该缩进；<br>在属性上，使用双引号，不要使用单引号；<br>属性名全小写，用中划线做分隔符；<br>不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；<br>不要忽略可选的关闭标签，例：<br> 和 。<br>代码示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">imgsrc="images</span>/<span class="attr">company_logo.png</span>"<span class="attr">alt</span>=<span class="string">"Company"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1class="hello-world"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1.2.2.HTML5 doctype<br>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；<br>虽然doctype不区分大小写，但是按照惯例，doctype大写。<br>不同doctype在不同浏览器下会触发不同的渲染模式，访问下面链接了解更多<br><a href="https://hsivonen.fi/doctype/" target="_blank" rel="external">https://hsivonen.fi/doctype/</a><br><a href="http://www.w3school.com.cn/tags/tag_doctype.asp" target="_blank" rel="external">http://www.w3school.com.cn/tags/tag_doctype.asp</a><br>代码示例：<br>&lt;!DOCTYPE html&gt;</p>
<html><br>    …<br></html>

<p>1.2.3.lang属性<br>根据HTML5规范：<br>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。<br>更多关于 lang 属性的说明在这里<a href="http://w3c.github.io/html/semantics.html#the-html-element" target="_blank" rel="external">http://w3c.github.io/html/semantics.html#the-html-element</a><br>具体的语言列表请查看这里<a href="https://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx</a><br>代码示例：<br>&lt;!DOCTYPE html&gt;</p>
<p><htmllan g="en-us"><br>    …<br></htmllan></p>
<p>1.2.4.字符编码<br>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’。<br>代码示例：<br>&lt;!DOCTYPE html&gt;</p>
<html><br><head><br><metacharse t="UTF-8"><br></metacharse></head><br>    …<br></html>

<p>1.2.5.IE兼容模式<br>用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；<br>如果你想要了解更多，请点击这里<a href="http://www.tuicool.com/articles/ra6Fjuj" target="_blank" rel="external">http://www.tuicool.com/articles/ra6Fjuj</a><br>代码示例：<br>&lt;!DOCTYPE html&gt;</p>
<html><br><head><br><metahttp-equi v="X-UA-Compatible" content="IE=Edge"><br></metahttp-equi></head><br>    …<br></html>

<p>1.2.6.引入CSS, JS<br>根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值。<br>HTML5 规范链接<br>使用link： <a href="http://www.w3school.com.cn/tags/tag_link.asp" target="_blank" rel="external">http://www.w3school.com.cn/tags/tag_link.asp</a><br>使用style：<a href="http://www.w3school.com.cn/tags/tag_style.asp" target="_blank" rel="external">http://www.w3school.com.cn/tags/tag_style.asp</a><br>使用script：<a href="http://www.w3school.com.cn/tags/tag_script.asp" target="_blank" rel="external">http://www.w3school.com.cn/tags/tag_script.asp</a><br>代码示例：<br><!-- External CSS --></p>
<linkre l="stylesheet" href="code_guide.css">

<!-- In-document CSS -->
<style>
...
</style>

<!-- External JS -->
<script src="code_guide.js"></script>

<!-- In-document JS -->
<p><script><br>…<br></script><br>1.2.7.属性顺序<br>属性应该按照特定的顺序出现以保证易读性；<br>class<br>id<br>name<br>data-<em><br>src, for, type, href, value , max-length, max, min, pattern<br>placeholder, title, alt<br>aria-</em>, role<br>required, readonly, disabled<br>class是为高可复用组件设计的，所以应处在第一位；<br>id更加具体且应该尽量少使用，所以将它放在第二位。<br>代码示例：</p>
<p><aclas s="..." id="..." data-modal="toggle" href="#">Example link</aclas></p>
<inputclas s="form-control" type="text">

<p><imgsr c="..." alt="..."><br>1.2.8.boolean属性<br>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；<br>更多内容可以参考 <a href="https://whatwg-cn.github.io/html/#boolean-attributes：" target="_blank" rel="external">https://whatwg-cn.github.io/html/#boolean-attributes：</a><br>boolean属性的存在表示取值为true，不存在则表示取值为false。<br>代码示例：</imgsr></p>
<inputtyp e="text" disabled="disabled">

<inputtyp e="checkbox" value="1" checked="checked">

<p><select></select></p>
<p><optionvalu e="1" selected="selected">1<br><br>1.2.9.JS生成标签<br>在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出现。<br>1.2.10.减少标签数量<br>在编写HTML代码时，需要尽量避免多余的父节点；<br>很多时候，需要通过迭代和重构来使HTML变得更少。<br>代码示例：<br><!-- Not well --></optionvalu></p>
<p><spanclas s="avatar"></spanclas></p>
<p><imgsr c="..."><br></imgsr></p>
<!-- Better -->
<p><imgclas s="avatar" src="..."><br>1.2.11.实用高于完美<br>尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价；<br>任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。<br>1.3.CSS,SCSS<br>1.3.1.缩进<br>使用soft tab（4个空格）。<br>代码示例：<br>.element{<br>    position:absolute;<br>    top:10px;<br>    left:10px;<br>    border-radius:10px;<br>    width:50px;<br>    height:50px;<br>}<br>1.3.2.分号<br>每个属性声明末尾都要加分号。<br>代码示例：<br>.element{<br>    width:20px;<br>    height:20px;<br>    background-color:red;<br>}<br>1.3.3.空格<br>以下几种情况不需要空格：<br>属性名后<br>多个规则的分隔符’,’前<br>!important ‘!’后<br>属性值中’(‘后和’)’前<br>行末不要有多余的空格</imgclas></p>
<p>以下几种情况需要空格：<br>属性值前<br>选择器’&gt;’, ‘+’, ‘~’前后<br>’{‘前<br>!important ‘!’前<br>@else 前后<br>属性值中的’,’后<br>注释’/<em>‘后和’</em>/‘前<br>代码示例：<br>/<em> not good </em>/<br>.element {<br>Color :red! important;<br>background-color: rgba(0,0,0,.5);<br>}</p>
<p>/<em> good </em>/<br>.element {<br>color: red !important;<br>background-color: rgba(0, 0, 0, .5);<br>}</p>
<p>/<em> not good </em>/<br>.element ,<br>.dialog{<br>…<br>}</p>
<p>/<em> good </em>/<br>.element,<br>.dialog {</p>
<p>}</p>
<p>/<em> not good </em>/<br>.element&gt;.dialog{<br>…<br>}</p>
<p>/<em> good </em>/<br>.element &gt; .dialog{<br>…<br>}</p>
<p>/<em> not good </em>/<br>.element{<br>…<br>}</p>
<p>/<em> good </em>/<br>.element {<br>…<br>}</p>
<p>/<em> not good </em>/<br>@if{<br>…<br>}@else{<br>…<br>}</p>
<p>/<em> good </em>/<br>@if {<br>…<br>} @else {<br>…<br>}<br>1.3.4.空行<br>以下几种情况需要空行：<br>文件最后保留一个空行<br>’}’后最好跟一个空行，包括scss中嵌套的规则<br>属性之间需要适当的空行，具体见属性声明顺序<br>代码示例：<br>/<em> not good </em>/<br>.element {<br>    …<br>}<br>.dialog {<br>    color:red;<br>&amp;:after{<br>…<br>    }<br>}</p>
<p>/<em> good </em>/<br>.element {<br>    …<br>}</p>
<p>.dialog {<br>color:red;</p>
<p>&amp;:after{<br>…<br>    }<br>}</p>
<p>1.3.5.换行<br>以下几种情况不需要换行：<br>’{‘前</p>
<p>以下几种情况需要换行：<br>’{‘后和’}’前<br>每个属性独占一行<br>多个规则的分隔符’,’后<br>代码示例：<br>/<em> not good </em>/<br>.element<br>{color:red; background-color:black;}</p>
<p>/<em> good </em>/<br>.element {<br>color:red;<br>background-color:black;<br>}</p>
<p>/<em> not good </em>/<br>.element,.dialog {<br>…<br>}</p>
<p>/<em> good </em>/<br>.element,<br>.dialog {<br>…<br>}<br>1.3.6.注释<br>注释统一用’/<em> </em>/‘（scss中也不要用’//‘），具体参照示例中的写法；<br>缩进与下一行代码保持一致；<br>可位于一个代码行的末尾，与代码间隔一个空格。<br>代码示例：<br>/<em> Modal header </em>/<br>.modal-header {<br>…<br>}</p>
<p>/*</p>
<ul>
<li>Modal header<br>*/<br>.modal-header {<br>…<br>}</li>
</ul>
<p>.modal-header {<br>/<em> 50px </em>/<br>width:50px;</p>
<p>color:red; /<em> color red </em>/<br>}<br>1.3.7.引号<br>最外层统一使用双引号；<br>url的内容要用引号；<br>属性选择器中的属性值需要引号。<br>代码示例：<br>element:after {<br>content:””;<br>background-image:url(“logo.png”);<br>}</p>
<p>li[data-type=”single”] {<br>…<br>}<br>1.3.8.命名<br>类名使用小写字母，以中划线分隔<br>id采用驼峰式命名<br>scss中的变量、函数、混合、placeholder采用驼峰式命名</p>
<p>更多关于css命名的技巧，请访问<br><a href="http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/</a></p>
<p>代码示例：<br>/<em> class </em>/<br>.element-content {<br>…<br>}</p>
<p>/<em> id </em>/</p>
<p>#myDialog {<br>…<br>}</p>
<p>/<em> 变量 </em>/<br>$colorBlack:#000;</p>
<p>/<em> 函数 </em>/<br>@functionpxToRem($px) {<br>…<br>}</p>
<p>/<em> 混合 </em>/<br>@mixincenterBlock {<br>…<br>}</p>
<p>/<em> placeholder </em>/<br>%myDialog {<br>…<br>}<br>1.3.9.属性声明顺序<br>相关的属性声明按右边的顺序做分组处理，组之间需要有一个空行。<br>代码示例：<br>.declaration-order {<br>display:block;<br>float:right;</p>
<p>position:absolute;<br>top:0;<br>right:0;<br>bottom:0;<br>left:0;<br>z-index:100;</p>
<p>border:1pxsolid#e5e5e5;<br>border-radius:3px;<br>width:100px;<br>height:100px;</p>
<p>font:normal13px”Helvetica Neue”,sans-serif;<br>line-height:1.5;<br>text-align:center;</p>
<p>color:#333;<br>background-color:#f5f5f5;</p>
<p>opacity:1;<br>}<br>// 下面是推荐的属性的顺序<br>[<br>    [<br>“display”,<br>“visibility”,<br>“float”,<br>“clear”,<br>“overflow”,<br>“overflow-x”,<br>“overflow-y”,<br>“clip”,<br>“zoom”<br>    ],<br>    [<br>“table-layout”,<br>“empty-cells”,<br>“caption-side”,<br>“border-spacing”,<br>“border-collapse”,<br>“list-style”,<br>“list-style-position”,<br>“list-style-type”,<br>“list-style-image”<br>    ],<br>    [<br>“-webkit-box-orient”,<br>“-webkit-box-direction”,<br>“-webkit-box-decoration-break”,<br>“-webkit-box-pack”,<br>“-webkit-box-align”,<br>“-webkit-box-flex”<br>    ],<br>    [<br>“position”,<br>“top”,<br>“right”,<br>“bottom”,<br>“left”,<br>“z-index”<br>    ],<br>    [<br>“margin”,<br>“margin-top”,<br>“margin-right”,<br>“margin-bottom”,<br>“margin-left”,<br>“-webkit-box-sizing”,<br>“-moz-box-sizing”,<br>“box-sizing”,<br>“border”,<br>“border-width”,<br>“border-style”,<br>“border-color”,<br>“border-top”,<br>“border-top-width”,<br>“border-top-style”,<br>“border-top-color”,<br>“border-right”,<br>“border-right-width”,<br>“border-right-style”,<br>“border-right-color”,<br>“border-bottom”,<br>“border-bottom-width”,<br>“border-bottom-style”,<br>“border-bottom-color”,<br>“border-left”,<br>“border-left-width”,<br>“border-left-style”,<br>“border-left-color”,<br>“-webkit-border-radius”,<br>“-moz-border-radius”,<br>“border-radius”,<br>“-webkit-border-top-left-radius”,<br>“-moz-border-radius-topleft”,<br>“border-top-left-radius”,<br>“-webkit-border-top-right-radius”,<br>“-moz-border-radius-topright”,<br>“border-top-right-radius”,<br>“-webkit-border-bottom-right-radius”,<br>“-moz-border-radius-bottomright”,<br>“border-bottom-right-radius”,<br>“-webkit-border-bottom-left-radius”,<br>“-moz-border-radius-bottomleft”,<br>“border-bottom-left-radius”,<br>“-webkit-border-image”,<br>“-moz-border-image”,<br>“-o-border-image”,<br>“border-image”,<br>“-webkit-border-image-source”,<br>“-moz-border-image-source”,<br>“-o-border-image-source”,<br>“border-image-source”,<br>“-webkit-border-image-slice”,<br>“-moz-border-image-slice”,<br>“-o-border-image-slice”,<br>“border-image-slice”,<br>“-webkit-border-image-width”,<br>“-moz-border-image-width”,<br>“-o-border-image-width”,<br>“border-image-width”,<br>“-webkit-border-image-outset”,<br>“-moz-border-image-outset”,<br>“-o-border-image-outset”,<br>“border-image-outset”,<br>“-webkit-border-image-repeat”,<br>“-moz-border-image-repeat”,<br>“-o-border-image-repeat”,<br>“border-image-repeat”,<br>“padding”,<br>“padding-top”,<br>“padding-right”,<br>“padding-bottom”,<br>“padding-left”,<br>“width”,<br>“min-width”,<br>“max-width”,<br>“height”,<br>“min-height”,<br>“max-height”<br>    ],<br>    [<br>“font”,<br>“font-family”,<br>“font-size”,<br>“font-weight”,<br>“font-style”,<br>“font-variant”,<br>“font-size-adjust”,<br>“font-stretch”,<br>“font-effect”,<br>“font-emphasize”,<br>“font-emphasize-position”,<br>“font-emphasize-style”,<br>“font-smooth”,<br>“line-height”,<br>“text-align”,<br>“-webkit-text-align-last”,<br>“-moz-text-align-last”,<br>“-ms-text-align-last”,<br>“text-align-last”,<br>“vertical-align”,<br>“white-space”,<br>“text-decoration”,<br>“text-emphasis”,<br>“text-emphasis-color”,<br>“text-emphasis-style”,<br>“text-emphasis-position”,<br>“text-indent”,<br>“-ms-text-justify”,<br>“text-justify”,<br>“letter-spacing”,<br>“word-spacing”,<br>“-ms-writing-mode”,<br>“text-outline”,<br>“text-transform”,<br>“text-wrap”,<br>“-ms-text-overflow”,<br>“text-overflow”,<br>“text-overflow-ellipsis”,<br>“text-overflow-mode”,<br>“-ms-word-wrap”,<br>“word-wrap”,<br>“-ms-word-break”,<br>“word-break”<br>    ],<br>    [<br>“color”,<br>“background”,<br>“filter:progid:DXImageTransform.Microsoft.AlphaImageLoader”,<br>“background-color”,<br>“background-image”,<br>“background-repeat”,<br>“background-attachment”,<br>“background-position”,<br>“-ms-background-position-x”,<br>“background-position-x”,<br>“-ms-background-position-y”,<br>“background-position-y”,<br>“-webkit-background-clip”,<br>“-moz-background-clip”,<br>“background-clip”,<br>“background-origin”,<br>“-webkit-background-size”,<br>“-moz-background-size”,<br>“-o-background-size”,<br>“background-size”<br>    ],<br>    [<br>“outline”,<br>“outline-width”,<br>“outline-style”,<br>“outline-color”,<br>“outline-offset”,<br>“opacity”,<br>“filter:progid:DXImageTransform.Microsoft.Alpha(Opacity”,<br>“-ms-filter:\‘progid:DXImageTransform.Microsoft.Alpha”,<br>“-ms-interpolation-mode”,<br>“-webkit-box-shadow”,<br>“-moz-box-shadow”,<br>“box-shadow”,<br>“filter:progid:DXImageTransform.Microsoft.gradient”,<br>“-ms-filter:\‘progid:DXImageTransform.Microsoft.gradient”,<br>“text-shadow”<br>    ],<br>    [<br>“-webkit-transition”,<br>“-moz-transition”,<br>“-ms-transition”,<br>“-o-transition”,<br>“transition”,<br>“-webkit-transition-delay”,<br>“-moz-transition-delay”,<br>“-ms-transition-delay”,<br>“-o-transition-delay”,<br>“transition-delay”,<br>“-webkit-transition-timing-function”,<br>“-moz-transition-timing-function”,<br>“-ms-transition-timing-function”,<br>“-o-transition-timing-function”,<br>“transition-timing-function”,<br>“-webkit-transition-duration”,<br>“-moz-transition-duration”,<br>“-ms-transition-duration”,<br>“-o-transition-duration”,<br>“transition-duration”,<br>“-webkit-transition-property”,<br>“-moz-transition-property”,<br>“-ms-transition-property”,<br>“-o-transition-property”,<br>“transition-property”,<br>“-webkit-transform”,<br>“-moz-transform”,<br>“-ms-transform”,<br>“-o-transform”,<br>“transform”,<br>“-webkit-transform-origin”,<br>“-moz-transform-origin”,<br>“-ms-transform-origin”,<br>“-o-transform-origin”,<br>“transform-origin”,<br>“-webkit-animation”,<br>“-moz-animation”,<br>“-ms-animation”,<br>“-o-animation”,<br>“animation”,<br>“-webkit-animation-name”,<br>“-moz-animation-name”,<br>“-ms-animation-name”,<br>“-o-animation-name”,<br>“animation-name”,<br>“-webkit-animation-duration”,<br>“-moz-animation-duration”,<br>“-ms-animation-duration”,<br>“-o-animation-duration”,<br>“animation-duration”,<br>“-webkit-animation-play-state”,<br>“-moz-animation-play-state”,<br>“-ms-animation-play-state”,<br>“-o-animation-play-state”,<br>“animation-play-state”,<br>“-webkit-animation-timing-function”,<br>“-moz-animation-timing-function”,<br>“-ms-animation-timing-function”,<br>“-o-animation-timing-function”,<br>“animation-timing-function”,<br>“-webkit-animation-delay”,<br>“-moz-animation-delay”,<br>“-ms-animation-delay”,<br>“-o-animation-delay”,<br>“animation-delay”,<br>“-webkit-animation-iteration-count”,<br>“-moz-animation-iteration-count”,<br>“-ms-animation-iteration-count”,<br>“-o-animation-iteration-count”,<br>“animation-iteration-count”,<br>“-webkit-animation-direction”,<br>“-moz-animation-direction”,<br>“-ms-animation-direction”,<br>“-o-animation-direction”,<br>“animation-direction”<br>    ],<br>    [<br>“content”,<br>“quotes”,<br>“counter-reset”,<br>“counter-increment”,<br>“resize”,<br>“cursor”,<br>“-webkit-user-select”,<br>“-moz-user-select”,<br>“-ms-user-select”,<br>“user-select”,<br>“nav-index”,<br>“nav-up”,<br>“nav-right”,<br>“nav-down”,<br>“nav-left”,<br>“-moz-tab-size”,<br>“-o-tab-size”,<br>“tab-size”,<br>“-webkit-hyphens”,<br>“-moz-hyphens”,<br>“hyphens”,<br>“pointer-events”<br>    ]<br>]</p>
<p>1.3.10.颜色<br>颜色16进制用小写字母；<br>颜色16进制尽量用简写。<br>代码示例：<br>/<em> not good </em>/<br>.element {<br>color:#ABCDEF;<br>background-color:#001122;<br>}</p>
<p>/<em> good </em>/<br>.element {<br>color:#abcdef;<br>background-color:#012;<br>}<br>1.3.11.属性简写<br>属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；<br>margin 和 padding 相反，需要使用简写；<br>常见的属性简写包括：<br>font<br>background<br>transition<br>animation<br>代码示例：<br>/<em> not good </em>/<br>.element {<br>    transition: opacity 1s linear 2s;<br>}</p>
<p>/<em> good </em>/<br>.element {<br>    transition-delay: 2s;<br>    transition-timing-function: linear;<br>    transition-duration: 1s;<br>    transition-property: opacity;<br>}<br>1.3.12.媒体查询<br>尽量将媒体查询的规则靠近与他们相关的规则，不要将他们一起放到一个独立的样式文件中，或者丢在文档的最底部，这样做只会让大家以后更容易忘记他们。<br>代码示例：<br>.element {<br>…<br>}</p>
<p>.element-avatar{<br>…<br>}</p>
<p>@media(min-width:480px) {<br>.element {<br>…<br>    }</p>
<p>.element-avatar {<br>…<br>    }<br>}<br>1.3.13.SCSS相关<br>提交的代码中不要有 @debug；<br>声明顺序：<br>@extend<br>不包含 @content 的 @include<br>包含 @content 的 @include<br>自身属性<br>嵌套规则<br>@import 引入的文件不需要开头的’_’和结尾的’.scss’；<br>嵌套最多不能超过5层；<br>@extend 中使用placeholder选择器；<br>去掉不必要的父级引用符号’&amp;’。<br>代码示例：<br>/<em> not good </em>/<br>@import”_dialog.scss”;</p>
<p>/<em> good </em>/<br>@import”dialog”;</p>
<p>/<em> not good </em>/<br>.fatal {<br>@extend .error;<br>}</p>
<p>/<em> good </em>/<br>.fatal {<br>@extend %error;<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>&amp;&gt;.dialog {<br>…<br>    }<br>}</p>
<p>/<em> good </em>/<br>.element {</p>
<blockquote>
<p>.dialog {<br>…<br>    }<br>}<br>1.3.14.杂项<br>不允许有空的规则；<br>元素选择器用小写字母；<br>去掉小数点前面的0；<br>去掉数字中不必要的小数点和末尾的0；<br>属性值’0’后面不要加单位；<br>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照下边的写法；<br>无前缀的标准属性应该写在有前缀的属性后面；<br>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；<br>不要在一个文件里出现两个相同的规则；<br>用 border: 0; 代替 border: none;；<br>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；<br>发布的代码中不要有 @import；<br>尽量少用’<em>‘选择器。<br>代码示例：<br>/</em> not good */<br>.element {<br>}</p>
</blockquote>
<p>/<em> not good </em>/<br>LI {<br>…<br>}</p>
<p>/<em> good </em>/<br>li {<br>…<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>color:rgba(0,0,0,0.5);<br>}</p>
<p>/<em> good </em>/<br>.element {<br>color:rgba(0,0,0,.5);<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>width:50.0px;<br>}</p>
<p>/<em> good </em>/<br>.element {<br>width:50px;<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>width:0px;<br>}</p>
<p>/<em> good </em>/<br>.element {<br>width:0;<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>border-radius:3px;<br>-webkit-border-radius:3px;<br>-moz-border-radius:3px;</p>
<p>background: linear-gradient(to bottom,#fff0,#eee100%);<br>background:-webkit-linear-gradient(top,#fff0,#eee100%);<br>background:-moz-linear-gradient(top,#fff0,#eee100%);<br>}</p>
<p>/<em> good </em>/<br>.element {<br>-webkit-border-radius:3px;<br>-moz-border-radius:3px;<br>border-radius:3px;</p>
<p>background:-webkit-linear-gradient(top,#fff0,#eee100%);<br>background:-moz-linear-gradient(top,#fff0,#eee100%);<br>background:         linear-gradient(to bottom,#fff0,#eee100%);<br>}</p>
<p>/<em> not good </em>/<br>.element {<br>color:rgb(0,0,0);<br>width:50px;<br>color:rgba(0,0,0,.5);<br>}</p>
<p>/<em> good </em>/<br>.element {<br>color:rgb(0,0,0);<br>color:rgba(0,0,0,.5);<br>}<br>1.4.JavaScript<br>1.4.1.缩进<br>使用soft tab（4个空格）。<br>代码示例：<br>var x =1,<br>    y =1;</p>
<p>if (x &lt; y) {<br>    x +=10;<br>} else {<br>    x +=1;<br>}</p>
<p>1.4.2.单行长度<br>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。<br>1.4.3.单个函数代码行数<br>单个函数尽量不要超过40行代码，迫不得已的情况下也不要超过100行。代码行数越多，产生BUG的概率越大，所以尽量减少单个函数的代码行数是很有必要的。减少单个函数的代码行数，对代码维护也是非常有益的。<br>1.4.4.分号<br>以下几种情况后需加分号：<br>变量声明<br>表达式<br>return<br>throw<br>break<br>continue<br>代码示例：<br>/<em> var declaration </em>/<br>var x =1;</p>
<p>/<em> expression statement </em>/<br>x++;</p>
<p>/<em> do-while </em>/<br>do {<br>x++;<br>} while (x &lt;10);<br>1.4.5.空格<br>以下几种情况不需要空格：<br>对象的属性名后<br>前缀一元运算符后<br>后缀一元运算符前<br>函数调用括号前<br>无论是函数声明还是函数表达式，’(‘前不要空格<br>数组的’[‘后和’]’前<br>对象的’{‘后和’}’前<br>运算符’(‘后和’)’前<br>以下几种情况需要空格：<br>二元运算符前后<br>三元运算符’?:’前后<br>代码块’{‘前<br>下列关键字前：else, while, catch, finally<br>下列关键字后：if, else, for, while, do, switch, case, try, catch, finally, with, return, typeof<br>单行注释’//‘后（若单行注释和代码同行，则’//‘前也需要），多行注释’*’后<br>对象的属性值前<br>for循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格<br>无论是函数声明还是函数表达式，’{‘前一定要有空格<br>函数的参数之间<br>代码示例：<br>// not good<br>var a = {<br>    b :1<br>};</p>
<p>// good<br>var a = {<br>    b: 1<br>};</p>
<p>// not good<br>++ x;<br>Y ++;<br>z = x?1:2;</p>
<p>// good<br>++x;<br>y++;<br>z = x ? 1 : 2;</p>
<p>// not good<br>var a = [ 1, 2 ];</p>
<p>// good<br>var a = [1, 2];</p>
<p>// not good<br>var a = ( 1+2 )*3;</p>
<p>// good<br>var a = (1 + 2) *3;</p>
<p>// no space before ‘(‘, one space before ‘{‘, one space between function parameters<br>var doSomething = function(a, b, c) {<br>// do something<br>};</p>
<p>// no space before ‘(‘<br>doSomething(item);</p>
<p>// not good<br>for(i=0;i&lt;6;i++){<br>    x++;<br>}</p>
<p>// good<br>for (i = 0; i &lt;6; i++) {<br>    x++;<br>}</p>
<p>1.4.6.空行<br>以下几种情况需要空行：<br>变量声明后（当变量声明在代码块的最后一行时，则无需空行）<br>注释前（当注释在代码块的第一行时，则无需空行）<br>代码块后（在函数调用、数组、对象中则无需空行）<br>文件最后保留一个空行<br>代码示例：<br>// need blank line after variable declaration<br>var x =1;</p>
<p>// not need blank line when variable declaration is last expression in the current block<br>if (x &gt;=1) {<br>var y = x +1;<br>}</p>
<p>var a =2;</p>
<p>// need blank line before line comment<br>a++;</p>
<p>function b() {<br>// not need blank line when comment is first line of block<br>return a;<br>}</p>
<p>// need blank line after blocks<br>for (var i =0; i &lt;2; i++) {<br>if (true) {<br>returnfalse;<br>    }</p>
<p>continue;<br>}</p>
<p>varobj= {<br>foo:function() {<br>return1;<br>    },</p>
<p>bar:function() {<br>return2;<br>    }<br>};</p>
<p>// not need blank line when in argument list, array, object<br>func(<br>2,<br>function() {<br>a++;<br>    },<br>3<br>);</p>
<p>var foo = [<br>2,<br>function() {<br>a++;<br>    },<br>3<br>];</p>
<p>var foo = {<br>a:2,<br>b:function() {<br>a++;<br>    },<br>c:3<br>};<br>1.4.7.换行<br>换行的地方，行末必须有’,’或者运算符；<br>以下几种情况不需要换行：<br>下列关键字后：else, catch, finally<br>代码块’{‘前<br>以下几种情况需要换行：<br>代码块’{‘后和’}’前<br>变量赋值后<br>代码示例：<br>// not good<br>var a = {<br>    b:1<br>    , c:2<br>};</p>
<p>x = y<br>?1:2;</p>
<p>// good<br>var a = {<br>b:1,<br>c:2<br>};</p>
<p>x = y ? 1 : 2;<br>x =y ?<br>1:2;</p>
<p>// no need line break with ‘else’, ‘catch’, ‘finally’<br>if (condition) {<br>    …<br>} else {<br>    …<br>}</p>
<p>try {<br>    …<br>} catch (e) {<br>    …<br>} finally {<br>    …<br>}</p>
<p>// not good<br>function test()<br>{<br>    …<br>}</p>
<p>// good<br>function test() {<br>    …<br>}</p>
<p>// not good<br>var a, foo =7, b,<br>c, bar =8;</p>
<p>// good<br>var a,<br>foo=7,<br>b, c, bar =8;<br>1.4.8.单行注释<br>双斜线后，必须跟一个空格；<br>缩进与下一行代码保持一致；<br>可位于一个代码行的末尾，与代码间隔一个空格。<br>代码示例：<br>if (condition) {<br>// if you made it here, then all security checks passed<br>allowed();<br>}</p>
<p>var zhangsan = ‘zhangsan’; // one space after code</p>
<p>1.4.9.多行注释<br>最少三行, ‘<em>‘后跟一个空格，具体参照右边的写法；<br>建议在以下情况下使用：<br>难于理解的代码段<br>可能存在错误的代码段<br>浏览器特殊的HACK代码<br>业务逻辑强相关的代码<br>代码示例：<br>/</em></p>
<ul>
<li>one space after ‘<em>‘
</em>/<br>var x =1;</li>
</ul>
<p>1.4.10.文档注释<br>各类标签@param, @method等请参考<a href="http://yuri4ever.github.io/jsdoc/；" target="_blank" rel="external">http://yuri4ever.github.io/jsdoc/；</a><br>建议在以下情况下使用：<br>所有常量<br>所有函数<br>所有类<br>代码示例：<br>/**</p>
<ul>
<li>@func</li>
<li>@desc一个带参数的函数</li>
<li>@param {string} a - 参数a</li>
<li>@param {number} b=1 - 参数b默认值为1</li>
<li>@param {string} c=1 - 参数c有两种支持的取值1—表示x2—表示xx</li>
<li>@param {object} d - 参数d为一个对象</li>
<li>@param {string} d.e - 参数d的e属性</li>
<li>@param {string} d.f - 参数d的f属性</li>
<li>@param {object[]} g - 参数g为一个对象数组</li>
<li>@param {string} g.h - 参数g数组中一项的h属性</li>
<li>@param {string} g.i - 参数g数组中一项的i属性</li>
<li>@param {string} [j] - 参数j是一个可选参数<br>*/<br>function foo(a, b, c, d, g, j) {<br> …<br>}<br>1.4.11.引号<br>最外层统一使用单引号。<br>代码示例：<br>// not good<br>var x =”test”;</li>
</ul>
<p>// good<br>var y =’foo’,<br>    z =’<div id="test"></div>‘;<br>1.4.12.变量命名<br>标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）<br>‘ID’在变量名中全大写<br>‘URL’在变量名中全大写<br>‘Android’在变量名中大写第一个字母<br>‘iOS’在变量名中小写第一个，大写后两个字母<br>常量全大写，用下划线连接<br>构造函数，大写第一个字母<br>jquery对象必须以’$’开头命名<br>代码示例：<br>Var thisIsMyName;</p>
<p>Var goodID;</p>
<p>Var reportURL;</p>
<p>Var AndroidVersion;</p>
<p>Var iOSVersion;</p>
<p>var MAX_COUNT =10;</p>
<p>function Person(name) {<br>    this.name = name;<br>}</p>
<p>// not good<br>var body = $(‘body’);</p>
<p>// good<br>var $body = $(‘body’);<br>1.4.13.变量声明<br>一个函数作用域中所有的变量声明尽量提到函数首部。<br>采用单var声明多个变量，并且5个变量为一组，超过5个另起一组。<br>代码示例：<br>Function doSomethingWithItems(items) {<br>// use one var<br>var value =10,<br>result= value +10,<br>i,<br>len,<br>count;<br>    // new<br>    var total;</p>
<p>for (i = 0, len = items.length; i &lt; len; i++) {<br>        result += 10;<br>}<br>}<br>1.4.14.函数<br>无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格；<br>函数调用括号前不需要空格；<br>立即执行函数外必须包一层括号；<br>不要给inline function命名；<br>参数之间用’, ‘分隔，注意逗号后有一个空格。<br>代码示例：<br>// no space before ‘(‘, but one space before’{‘<br>var doSomething = function(item) {<br>// do something<br>};</p>
<p>function doSomething(item) {<br>// do something<br>}</p>
<p>// not good<br>doSomething (item);</p>
<p>// good<br>doSomething(item);</p>
<p>// requires parentheses around immediately invoked function expressions<br>(function() {<br>    return1;<br>})();</p>
<p>// not good<br>[1, 2].forEach(function x() {<br>    …<br>});</p>
<p>// good<br>[1, 2].forEach(function() {<br>    …<br>});</p>
<p>// not good<br>var a = [1, 2, function a() {<br>    …<br>}];</p>
<p>// good<br>var a = [1, 2, function() {<br>    …<br>}];</p>
<p>// use ‘, ‘ between function parameters<br>var doSomething = function(a, b, c) {<br>// do something<br>};<br>1.4.15.数组、对象<br>对象属性名不需要加引号；<br>对象以缩进的形式书写，不要写在一行；<br>数组、对象最后不要有逗号。<br>代码示例：<br>// not good<br>var a = {<br>    ‘b’:1<br>};</p>
<p>var a = {b:1};</p>
<p>var a = {<br>    b:1,<br>    c:2,<br>};</p>
<p>// good<br>var a = {<br>    b:1,<br>    c:2<br>};<br>1.4.16.括号<br>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。<br>代码示例：<br>// not good<br>if (condition)<br>doSomething();</p>
<p>// good<br>if (condition) {<br>    doSomething();<br>}<br>1.4.17.null<br>适用场景：<br>初始化一个将来可能被赋值为对象的变量<br>与已经初始化的变量做比较<br>作为一个参数为对象的函数的调用传参<br>作为一个返回对象的函数的返回值<br>不适用场景：<br>不要用null来判断函数调用时有无传参<br>不要与未初始化的变量做比较<br>代码示例：<br>// not good<br>function test(a, b) {<br>    if (b === null) {<br>        // not mean b is not supply<br>            …<br>        }<br>}</p>
<p>var a;</p>
<p>if (a === null) {<br>    …<br>}</p>
<p>// good<br>var a = null;</p>
<p>if (a === null) {<br>    …<br>}<br>1.4.18.undefined<br>永远不要直接使用undefined进行变量判断；<br>使用typeof和字符串’undefined’对变量进行判断。<br>代码示例：<br>// not good<br>if (person === undefined) {<br>    …<br>}</p>
<p>// good<br>if (typeof person === ‘undefined’) {<br>    …<br>}<br>1.4.19.jshint<br>用’===’, ‘!==’代替’==’, ‘!=’；<br>for-in里一定要有hasOwnProperty的判断；<br>不要在内置对象的原型上添加方法，如Array, Date；<br>不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量；<br>变量不要先使用后声明；<br>不要在一句代码中单单使用构造函数，记得将其赋值给某个变量；<br>不要在同个作用域下声明同名变量；<br>不要在一些不需要的地方加括号，例：delete(a.b)；<br>不要使用未声明的变量（全局变量需要加到.jshintrc文件的globals属性里面）；<br>不要声明了变量却不使用；<br>不要在应该做比较的地方做赋值；<br>debugger不要出现在提交的代码里；<br>数组中不要存在空元素；<br>不要在循环内部声明函数；<br>不要像这样使用构造函数，例：new function () { … }, new Object；<br>代码示例：<br>// not good<br>if (a == 1) {<br>a++;<br>}</p>
<p>// good<br>if (a === 1) {<br>a++;<br>}</p>
<p>// good<br>for (key in obj) {<br>if (obj.hasOwnProperty(key)) {<br>// be sure that obj[key] belongs to the object and was not inherited<br>console.log(obj[key]);<br>    }<br>}</p>
<p>// not good<br>Array.prototype.count=function(value) {<br>Return 4;<br>};</p>
<p>// not good<br>var x = 1;</p>
<p>function test() {<br>if (true) {<br>var x = 0;<br>    }</p>
<pre><code>x += 1;
</code></pre><p>}</p>
<p>// not good<br>function test() {<br>    console.log(x);</p>
<p>var x =1;<br>}</p>
<p>// not good<br>new Person();</p>
<p>// good<br>var person = new Person();</p>
<p>// not good<br>delete(obj.attr);</p>
<p>// good<br>Delete obj.attr;</p>
<p>// not good<br>if (a = 10) {<br>a++;<br>}</p>
<p>// not good<br>var a = [1, , , 2, 3];</p>
<p>// not good<br>Var nums = [];</p>
<p>for (var i = 0; i &lt; 10; i++) {<br>    (function(i) {<br>nums[i] =function(j) {<br>return i + j;<br>         };<br>}(i));<br>}</p>
<p>// not good<br>var singleton = new function() {<br>var privateVar;</p>
<p>this.publicMethod = function() {<br>privateVar = 1;<br>     };</p>
<p>this.publicMethod2 = function() {<br>privateVar = 2;<br>     };<br>};<br>1.4.20.杂项<br>不要混用tab和space；<br>不要在一处使用多个tab或space；<br>换行符统一用’LF’；<br>对上下文this的引用只能使用’_this’, ‘that’, ‘self’其中一个来命名；<br>行尾不要有空白字符；<br>switch的falling through和no default的情况一定要有注释特别说明；<br>不允许有空的代码块。<br>代码示例：<br>// not good<br>var a   =1;</p>
<p>function Person() {<br>// not good<br>var me = this;</p>
<p>// good<br>var _this = this;</p>
<p>// good<br>var that = this;</p>
<p>// good<br>var self = this;<br>}</p>
<p>// good<br>switch (condition) {<br>case 1:<br>case 2:<br>        …<br>break;<br>case 3:<br>        …<br>// why fall through<br>Case 4:<br>        …<br>break;<br>// why no default<br>}</p>
<p>// not good with empty block<br>if (condition) {</p>
<p>}</p></inputtyp></inputtyp></inputclas></linkre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命名规则&quot;&gt;&lt;a href=&quot;#命名规则&quot; class=&quot;headerlink&quot; title=&quot;命名规则&quot;&gt;&lt;/a&gt;命名规则&lt;/h1&gt;&lt;h2 id=&quot;项目及文件命名规则&quot;&gt;&lt;a href=&quot;#项目及文件命名规则&quot; class=&quot;headerlink&quot; title=&quot;项目及文件命名规则&quot;&gt;&lt;/a&gt;项目及文件命名规则&lt;/h2&gt;&lt;h3 id=&quot;项目命名&quot;&gt;&lt;a href=&quot;#项目命名&quot; class=&quot;headerlink&quot; title=&quot;项目命名&quot;&gt;&lt;/a&gt;项目命名&lt;/h3&gt;&lt;p&gt;全部采用小写方式， 以下划线分隔。&lt;br&gt;例：&lt;code&gt;my_project_name&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;目录命名&quot;&gt;&lt;a href=&quot;#目录命名&quot; class=&quot;headerlink&quot; title=&quot;目录命名&quot;&gt;&lt;/a&gt;目录命名&lt;/h3&gt;&lt;p&gt;参照项目命名规则；&lt;br&gt;有复数结构时，要采用复数命名法。&lt;br&gt;例：&lt;code&gt;scripts&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;data_models&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;JS文件命名&quot;&gt;&lt;a href=&quot;#JS文件命名&quot; class=&quot;headerlink&quot; title=&quot;JS文件命名&quot;&gt;&lt;/a&gt;JS文件命名&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angularjs&amp;Jquery项目优化实践</title>
    <link href="https://sefon-fe.github.io/2016/09/30/run-faster/"/>
    <id>https://sefon-fe.github.io/2016/09/30/run-faster/</id>
    <published>2016-09-30T09:20:31.000Z</published>
    <updated>2017-01-18T04:14:28.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h2><ul>
<li>设计器操作性能优化</li>
<li>设计器加载启动速度优化</li>
</ul>
<h2 id="操作性能优化"><a href="#操作性能优化" class="headerlink" title="操作性能优化"></a>操作性能优化</h2><h3 id="性能缺陷分析"><a href="#性能缺陷分析" class="headerlink" title="性能缺陷分析"></a>性能缺陷分析</h3><ul>
<li>设计器中未添加项目时页面中的<code>html</code>标签数量达到： 6258 个</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>).length</div><div class="line"><span class="comment">//得到 6258 多个DOM节点，还是比较多了。可想添加了项目之后这个还会增加更多，预计在1万以上</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>由于<code>html</code>节点很多，在查找操作某个DOM节点时是非常消耗性能的，其中项目中（designerDirective.js，等组件。。。）存在较多未缓存的节点操作；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//element.parent(),多次使用，可以缓存起来</span></div><div class="line"><span class="comment">//同时element.parent().parent()，也是多次使用，多次查找</span></div><div class="line">state = element.parent().attr(<span class="string">"state"</span>);</div><div class="line">   <span class="keyword">if</span> (state == <span class="string">'close'</span>) &#123;</div><div class="line">       element.parent().parent().addClass(<span class="string">"pageCtrInitialize"</span>).removeClass(<span class="string">"pageCtr"</span>);</div><div class="line">       element.parent().parent().siblings().addClass(<span class="string">"moduleCtrInitialize"</span>).removeClass(<span class="string">"moduleCtr"</span>);</div><div class="line">       element.parent().attr(<span class="string">"state"</span>, <span class="string">"open"</span>);</div><div class="line">       element.children(<span class="string">"i"</span>).addClass(<span class="string">"defaultIcon-down"</span>).removeClass(<span class="string">"defaultIcon-up"</span>);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="string">'open'</span>) &#123;</div><div class="line">       element.parent().parent().addClass(<span class="string">"pageCtr"</span>).removeClass(<span class="string">"pageCtrInitialize"</span>);</div><div class="line">       element.parent().parent().siblings().addClass(<span class="string">"moduleCtr"</span>).removeClass(<span class="string">"moduleCtrInitialize"</span>);</div><div class="line">       element.parent().attr(<span class="string">"state"</span>, <span class="string">"close"</span>);</div><div class="line">       element.children(<span class="string">"i"</span>).addClass(<span class="string">"defaultIcon-up"</span>).removeClass(<span class="string">"defaultIcon-down"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//优化</span></div><div class="line"><span class="keyword">var</span> $parent = element.parent(),</div><div class="line">	$pParent = $parent.parent();</div><div class="line"></div><div class="line"><span class="comment">//do something...</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>AngularJs</code>的脏值检测机智在<strong>某些时候</strong>会严重影响性能；具体看下面参考资料，必读篇。</p>
<ul>
<li>DOM事件，譬如用户输入文本，点击按钮等。(ng-click)</li>
<li>XHR响应事件 ($http)</li>
<li>浏览器Location变更事件 ($location)</li>
<li>Timer事件($timeout, $interval)</li>
<li><p>执行$digest()或$apply()</p>
<p>都会触发<code>$digest cycle</code></p>
</li>
</ul>
</li>
<li>页面鼠标操作触发事件是很耗性能的；</li>
</ul>
<h3 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h3><blockquote>
<p>JS&amp;Jquery操作<code>DOM</code>方向</p>
</blockquote>
<ul>
<li>尽量减少<code>html</code>标签的嵌套；</li>
<li>一定要缓存<strong>多次</strong>使用的<code>DOM</code>节点，操作节点代价很高的；</li>
<li>减少JS循环的操作；</li>
<li>使用事件代理，在多数据的列表中 <code>$(&#39;#ul&#39;).on(&#39;click&#39;, &#39;li&#39;, func)</code>;</li>
<li>对某些<code>DOM</code>样式的操作，可以考虑<code>cssText</code>或者生成临时<code>class</code>样式追加到页面中；</li>
<li><p>Jquery编码方式性能优化 【读】 </p>
<ul>
<li><a href="http://www.open-open.com/lib/view/open1401757126775.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1401757126775.html</a></li>
<li><a href="http://blog.jobbole.com/10279/" target="_blank" rel="external">http://blog.jobbole.com/10279/</a></li>
</ul>
</li>
<li><p>雅虎性能优化方案【读】</p>
<ul>
<li><a href="http://blog.csdn.net/u010648555/article/details/50721751" target="_blank" rel="external">http://blog.csdn.net/u010648555/article/details/50721751</a></li>
<li><a href="http://www.tuicool.com/articles/J3uyaa" target="_blank" rel="external">http://www.tuicool.com/articles/J3uyaa</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>AngularJs优化方向</p>
</blockquote>
<ul>
<li><p>NG的硬伤</p>
<p>  说到硬伤就要先说下它的简单的数据绑定原理,ng里每个页面上定义的<code>model</code>其实都会在当前作用域下添加一个监听器,内部容器就是<code>$$wachers</code>数组,只要页面任何一个<code>model</code>发生变化了,就会触发作用域内部<code>$digest</code>方法,它会依次查找当前作用域树里的所有<code>model</code>,是保证页面上的模型能得到数据同步,所以这个是非常消耗程序时间的,官方的说法就是当页面上出现<code>2000</code>个监听器时,页面性能就会明显下降.所以要提高ng的性能,就要从这方面入手了.</p>
</li>
</ul>
<ul>
<li>避免深度数据的<code>$watch</code>,因为会触发<code>$digest</code>，循环脏值检测；详情见【参考资料第一个】</li>
<li>指令中引用第三方服务，使用 <code>$on.$destroy</code>,来销毁当前不用的服务。</li>
<li><p>使用Angular一次绑定方案</p>
<p>  ng的1.3.0+的版本已经内置提供了一个语法来支持模型只绑定一次的情况,看下面的例子:</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--双向--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--单项--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;::name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>$scope.$digest vs $scope.$apply</p>
<p>  相信很多人对<code>$apply</code>方法不陌生,它一般用在,当不在ng的环境里执行代码的时候,为了保证页面的数据同步,在代码执行完成之后调用$apply方法会触发内部<code>$digest</code>来检查作用域里所有的模型。想要保证页面上所有模型数据的同步,还是得调用<code>$rootScope</code>的,所以在写代码之前最好想想哪些数据是要同步变化的.</p>
</li>
<li><p>尽可能少调用 <code>ng-repeat</code></p>
<p>  <code>ng-repeat</code>默认会创建很多监听器,所以在数据量很大的时候,这个非常消耗页面性能,我觉的只有在当需要经常更新数据列表的时候才需要用<code>ng-repeat</code>,要不然放那么多的监听器在那里也是浪费,这时候可以用ng自带的<code>$interpolate</code>服务来解析一个代码片段,类似于一个静态模板引擎,它的内部主要依赖ng核心解析服务<code>$parse</code>,然后把这些填充数据之后的代码片段直接赋给一个一次性的模型性就可以.</p>
</li>
<li><p>尽量在指令里写原生语法</p>
<p>  虽然ng提供了很多的指令比如<code>ng-show,ng-hide</code>,其实它们作用就是根据模型的<code>true,false</code>来显示或隐藏一个代码片段,虽然能够很快速的实现业务要求,但是这些指令还是默认会添加监听器,假如这些代码片段存在于一个大的指令里面时,更好的方法是在指令<code>link</code>里编写<code>.show(), .hide()</code>这些类似的<code>jq</code>方法来控制比较好,这样可以节省监听器的数量,类似的还有自带的事件指令,这些其实都可以在外围指令里通过使用<code>addEventListener</code>来绑定事件,反正在写代码之前,最好想想怎么样来使监听器的数量最少,这样才能全面的提高页面性能.</p>
</li>
<li><p>页面内尽量少用<code>filters</code></p>
<p>  当在页面内的模型后面增加<code>filter</code>时,这个会造成当前模型在<code>$digest</code>里运行两次,造成不必要的性能浪费.第一次在<code>$$watchers</code>检测任务改变时;第二次发生在模型值修改时,所以尽量少用内联时的过滤器语法,像下面这样的非常影响页面性能<br>  推荐使用<code>$filter</code>服务来调用某个过滤器函数在后台,这样能明显的提高页面性能,代码如下</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$filter(<span class="string">'filter'</span>)(array, expression, comparator);</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>系统框架是Angular，这一块由于经验欠缺，说的不是很细，只能贴一些参考。更多的是在 JS，Jquery的操作上面，基础的优化还是很有必要的。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>AngularJS性能优化心得【建议必看】 <a href="https://github.com/atian25/blog/issues/5" target="_blank" rel="external">https://github.com/atian25/blog/issues/5</a></li>
<li>优化AngularJS：1200毫秒到35毫秒的蜕变 <a href="http://blog.jobbole.com/51180/" target="_blank" rel="external">http://blog.jobbole.com/51180/</a></li>
<li>AngularJS中的数据绑定 <a href="https://github.com/rchee/translation/blob/master/angularJS/databinding-in-angularjs.md" target="_blank" rel="external">https://github.com/rchee/translation/blob/master/angularJS/databinding-in-angularjs.md</a></li>
<li>How I’ve Improved My Angular Apps by Banning ng-controller <a href="http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html" target="_blank" rel="external">http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html</a></li>
<li>angular-lazyload <a href="https://github.com/atian25/angular-lazyload" target="_blank" rel="external">https://github.com/atian25/angular-lazyload</a></li>
</ul>
<h2 id="启动性能优化"><a href="#启动性能优化" class="headerlink" title="启动性能优化"></a>启动性能优化</h2><h3 id="启动缺陷分析"><a href="#启动缺陷分析" class="headerlink" title="启动缺陷分析"></a>启动缺陷分析</h3><ul>
<li>页面加载求情的资源总大小： ；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http://10.0.5.40/analystui/project.html#/project?lan=zh</div><div class="line">总请求数 450 个,资源总大小 17.6MB ,transferred 4.88s DOMContentLoaded 1.46s</div></pre></td></tr></table></figure>
<p>由于是局域网，所以加载完成到启动项目还不是很慢，但是一旦到了公网中，就要考虑用户的带宽问题了。同时浏览器对资源请求并发数，也是有些限制的，具体参考 <a href="http://www.zhihu.com/question/20474326" target="_blank" rel="external">http://www.zhihu.com/question/20474326</a></p>
<ul>
<li>页面请求的文件数量： 根据带宽计算时间 ；</li>
<li>图片，样式，脚本，HTML都没有使用压缩，里面包含了很多的开发注释和一些二次修改代码，导致体积很大；</li>
<li>nginx优化等等；</li>
<li>考虑使用<code>CDN</code>，或者全站<code>CDN</code>方案；</li>
</ul>
<h3 id="改进方案-1"><a href="#改进方案-1" class="headerlink" title="改进方案"></a>改进方案</h3><ul>
<li>使用<code>gulp</code>或者其他构建工具压缩 <code>CSS，JS，HTML，IMG</code>，合并等；以带到减少文件大小，请求数量等等；</li>
<li>可能的话，可以尝试使用全站<code>CDN</code>加速；</li>
<li>或者使用懒加载方案<code>lazyload</code>，加载后续操作的脚本和样式等；</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化方向&quot;&gt;&lt;a href=&quot;#优化方向&quot; class=&quot;headerlink&quot; title=&quot;优化方向&quot;&gt;&lt;/a&gt;优化方向&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;设计器操作性能优化&lt;/li&gt;
&lt;li&gt;设计器加载启动速度优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作性能优化&quot;&gt;&lt;a href=&quot;#操作性能优化&quot; class=&quot;headerlink&quot; title=&quot;操作性能优化&quot;&gt;&lt;/a&gt;操作性能优化&lt;/h2&gt;&lt;h3 id=&quot;性能缺陷分析&quot;&gt;&lt;a href=&quot;#性能缺陷分析&quot; class=&quot;headerlink&quot; title=&quot;性能缺陷分析&quot;&gt;&lt;/a&gt;性能缺陷分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计器中未添加项目时页面中的&lt;code&gt;html&lt;/code&gt;标签数量达到： 6258 个&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;).length&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//得到 6258 多个DOM节点，还是比较多了。可想添加了项目之后这个还会增加更多，预计在1万以上&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="性能优化" scheme="https://sefon-fe.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="angular" scheme="https://sefon-fe.github.io/tags/angular/"/>
    
      <category term="jquery" scheme="https://sefon-fe.github.io/tags/jquery/"/>
    
  </entry>
  
</feed>
